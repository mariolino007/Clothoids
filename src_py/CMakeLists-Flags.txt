macro(target_assign_flags target)
  if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")

    target_compile_options(${target} PRIVATE
      -std=c++17 -Wall -Wno-float-equal -Wno-padded
      $<$<CONFIG:Release>: -funroll-loops -O2 -g0 >
      $<$<CONFIG:Debug>: -O0 -g3 >)

    target_compile_definitions(${target} PRIVATE
      $<$<CONFIG:Debug>: PINS_DEBUG DEBUG >)

  elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")

    target_compile_options(${target} PRIVATE
      -std=c++17 -stdlib=libc++  -Weverything -Wno-weak-vtables
      -Wno-implicit-fallthrough -Wno-documentation-unknown-command
      -Wno-float-equal -Wno-c++98-compat -Wno-c++98-compat-pedantic
      -Wno-padded -Wno-reserved-id-macro -Wno-documentation
      $<$<CONFIG:Release>: -funroll-loops -O2 -g0 >
      $<$<CONFIG:Debug>: -O0 -g3 >)

    target_compile_definitions(${target} PRIVATE
      $<$<CONFIG:Debug>: " PINS_DEBUG DEBUG " >)

  elseif (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")

    target_compile_options(${target} PRIVATE
      /std:c++17
      /permissive-
      /EHsc
      /bigobj
      /W4
      /wd4068  # Disabilita warning pragma non riconosciuto
      $<$<CONFIG:Release>: /O2 /MD /GL >
      $<$<CONFIG:Debug>: /Od /Ob0 /MDd /Z7 /RTC1 >
    )

    target_compile_definitions(${target} PRIVATE
      _WINDOWS
      NOMINMAX
      _SCL_SECURE_NO_WARNINGS
      HAVE_STRING_H
      NO_GETTIMEOFDAY
      PYBIND11_EXPORT
      $<$<CONFIG:Debug>: _DEBUG PINS_DEBUG >
    )

  else()

    message(FATAL_ERROR "Unsupported compiler ${CMAKE_CXX_COMPILER_ID}")

  endif()
endmacro()
